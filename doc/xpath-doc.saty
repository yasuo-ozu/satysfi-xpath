@require: stdjareport
@require: itemize
@require: list
@require: annot
@require: color
@require: math

@import: ../src/xpath
@import: ../src/util
% @import: ../src/visualizer

let-inline ctx \test-path gs =
    let bboxs = gs |> List.map get-graphics-bbox in
    let ((x1, y1), (x2, y2)) = match gs with
        | [] -> ((0pt, 0pt), (0pt, 0pt))
        | g::gs -> gs |> List.fold-left (fun ret g -> (
              get-graphics-bbox g |> concat-bbox ret
        )) (get-graphics-bbox g)
    in
    let w = x2 -' x1 in
    let h = y2 -' y1 in
    inline-graphics w h 0pt (fun (x, y) -> (
        gs |> List.map (shift-graphics (x -' x1, y -' y1))
    ))
in

let () = XPathCurve.run-debug () in
let () = XPathRail.run-debug () in
let ctx = get-initial-context 16pt (command \math) in
document (|
  title = {XPath パッケージ};
  author = {The XPath Contributors};
|) '<
     +chapter{基本的なコマンド}<
         +section{パスの組み立て}<
             +p {
                 \code(`satysfi-xpath`);は、端的に言えばパスを表す独自の型である\code(`XPath.t`);及び未完パスを表す\code(`XPath.pre`);を扱うためのライブラリです。これらは\SATySFi;における\code(`path`);及び\code(`pre-path`);に対応します。
             }
             +p {
                 \code(`satysfi-xpath`);は\SATySFi;が持つパス操作コマンドと互換性のあるコマンドをサポートしており、\code(`opan XPath`);とすることにより、\SATySFi;の提供するパス操作コマンドを置き換えることもできます(推奨はしない)。
             }
             +p {
                 具体的には、以下のコマンドをサポートします。
             }
             +code(```
XPath.unite-path : XPath.t -> XPath.t -> XPath.t
XPath.shift-path : point -> XPath.t -> XPath.t
XPath.linear-transform-path : float -> float -> float -> float -> XPath.t -> XPath.t
XPath.get-path-bbox : XPath.t -> point * point
XPath.start-path : point -> XPath.pre
XPath.line-to : point -> XPath.pre -> XPath.pre
XPath.bezier-to : point -> point -> point -> XPath.pre -> XPath.pre
XPath.terminate-path : XPath.pre -> XPath.t
XPath.close-with-line : XPath.pre -> XPath.t
XPath.close-with-bezier : point -> point -> XPath.pre -> XPath.t
XPath.stroke : length -> color -> XPath.t -> graphics
XPath.fill : color -> XPath.t -> graphics
XPath.dashed-stroke : length -> length * length * length -> color -> XPath.t -> graphics
             ```);
         >
         +section{例}<
             +code(```
XPath.(
    start-path (0pt, 0pt)
    |> line-to (2cm, 2cm)
    |> close-with-bezier (2cm, 0cm) (2cm, 0cm)
    |> stroke 5pt (Color.blue)
)
            ```);
            +p {
                とすると、\test-path(
                    [
                        XPath.(
                            start-path (0pt, 0pt)
                                |> line-to (2cm, 2cm)
                                |> close-with-bezier (2cm, 0cm) (2cm, 0cm)
                                |> stroke 5pt (Color.blue)
                        )
                    ]
                );となります。
            }

         >
         +section{組み込み型との変換}<
             +p {
                 \code(`XPath.t`);, \code(`XPath.pre`);を\SATySFi;に組み込みの\code(`path`);, \code(`pre-path`);に変換するため、以下のコマンドが用意されています。\footnote{これらのコマンドは通常使用する必要はありませんが、他の\code(`path`);を操作するライブラリ等と連携させる場合に使用できます。}
             }
             +code(```
XPath.to-embedded-path : XPath.t -> path
XPath.to-embedded-prepath : XPath.pre -> pre-path
             ```);
             +p {
                 逆に、\SATySFi;の組み込み型から\code(`satysfi-xpath`);の型に変換する方法はありません。
             }
         >
     >
     +chapter{便利な機能}<
         +p {
             ここでは、\SATySFi;の組み込み\code(`path`);機能にはない、\code(`satysfi-xpath`);独自の便利な機能について説明します。
         }
         +section{交点を求めるコマンド}<
             +p {
                 交点を求める機能として以下が提供されています。
             }
             +code(```
XPath.get-intersections : length -> XPath.t -> point list
XPath.get-intersections-with : length -> XPath.pre -> XPath.t -> point list
             ```);
             +listing{
                 * \code(`get-intersections delta pat`);${\cdots}与えられたパス\code(`pat`);の内部の交点(\code(`point`);型)のリストを得ます。\code(`delta`);は精度です。
                 * \code(`get-intersections-with delta ppat pat `);${\cdots}与えられた未完パス\code(`ppat`);がパス\code(`pat`);と交わる点のリストを得ます。得られる点列は\code(`ppat`);上で順番になっています。
             }
             +p {
                 例えば、以下のコード
             }
             +code(```
let pat = XPath.(
    start-path (4cm, -1cm) |> line-to (2cm, 3cm)
    |> line-to (0cm, -1cm) |> line-to (-2cm, 3cm)
    |> line-to (-4cm, -1cm) |> terminate-path
) in
let ppat = XPath.(
    start-path (-4cm, 0cm)
    |> bezier-to (-4cm, 0cm) (-2cm, 2cm) (0cm, 2cm)
    |> bezier-to (2cm, 2cm) (4cm, 0cm) (4cm, 0cm)
) in
let pts = XPath.get-intersections-with 0.001cm ppat pat in
let labels = pts |> List.mapi (fun i p -> (
    let () = show-point p |> display-message in
    [
        Gr.circle p 0.2cm |> fill (Color.yellow);
        arabic i |> embed-string |> read-inline ctx |> draw-text p
    ]
)) |> List.concat in
XPath.(
    List.append [
        pat |> stroke 1pt (Color.blue);
        ppat |> terminate-path |> stroke 1pt (Color.black);
    ] labels
)
             ```);
             +p {
                 は以下のように表示されます。このとき、図中の番号(すなわち\code(`get-intersections-with`);が交点を出力する順番)は与えられた\code(`XPath.pre`);(図の曲線右向き)と同じ順番で表示されていることを確認してください。
             }
             +p {
                 \test-path(
                     let pat = XPath.(
                         start-path (4cm, -1cm) |> line-to (2cm, 3cm)
                         |> line-to (0cm, -1cm) |> line-to (-2cm, 3cm)
                         |> line-to (-4cm, -1cm) |> terminate-path
                     ) in
                     let ppat = XPath.(
                         start-path (-4cm, 0cm)
                         |> bezier-to (-4cm, 0cm) (-2cm, 2cm) (0cm, 2cm)
                         |> bezier-to (2cm, 2cm) (4cm, 0cm) (4cm, 0cm)
                     ) in
                     let pts = XPath.get-intersections-with 0.001cm ppat pat in
                     let labels = pts |> List.mapi (fun i p -> (
                         let () = show-point p |> display-message in
                         [
                             Gr.circle p 0.2cm |> fill (Color.yellow);
                             arabic i |> embed-string |> read-inline ctx |> draw-text p
                         ]
                     )) |> List.concat in
                     XPath.(
                         List.append [
                             pat |> stroke 1pt (Color.blue);
                             ppat |> terminate-path |> stroke 1pt (Color.black);
                         ] labels
                     )
                 );
             }
             +p {
                 また、\code(`get-intersections`);の例を示します。
             }
             +code(```
 let pat = XPath.(
     start-path (4cm, 0pt) |> line-to (-3.2cm, 1.8cm)
     |> line-to (1.2cm, -4cm) |> line-to (1.2cm, 4cm)
     |> line-to (-3.2cm, -1.8cm) |> close-with-line
 ) in
 let pts = XPath.get-intersections 0.001cm pat in
 let labels = pts |> List.mapi (fun i p -> (
     let () = show-point p |> display-message in
     [
         Gr.circle p 0.2cm |> fill (Color.yellow);
         arabic i |> embed-string |> read-inline ctx |> draw-text p
     ]
 )) |> List.concat in
 XPath.(
     List.append [
         pat |> stroke 1pt (Color.blue);
     ] labels
 )
             ```);
             +p {
                 \test-path(
                     let pat = XPath.(
                         start-path (4cm, 0pt) |> line-to (-3.2cm, 1.8cm)
                         |> line-to (1.2cm, -4cm) |> line-to (1.2cm, 4cm)
                         |> line-to (-3.2cm, -1.8cm) |> close-with-line
                     ) in
                     let pts = XPath.get-intersections 0.001cm pat in
                     let labels = pts |> List.mapi (fun i p -> (
                         let () = show-point p |> display-message in
                         [
                             Gr.circle p 0.2cm |> fill (Color.yellow);
                             arabic i |> embed-string |> read-inline ctx |> draw-text p
                         ]
                     )) |> List.concat in
                     XPath.(
                         List.append [
                             pat |> stroke 1pt (Color.blue);
                         ] labels
                     )
                 );

             }

         >
         +section{長さに関するコマンド} <
             +p {
                 ここでは、曲線の長さを取得したり、点の曲線上における位置を取得したり、長さを用いて曲線を操作するコマンドを紹介します。
             }
             +code(```
XPath.get-rough-length : length -> XPath.pre -> length
XPath.get-point-of-len : length -> length -> pre -> point
XPath.get-projection : length -> point -> pre -> point
XPath.get-projection-length : length -> point -> pre -> length
XPath.split : length -> length -> pre -> pre * pre
             ```);
             +listing{
                 * \code(`get-rough-length delta ppat`);${\cdots}与えられた未完パス\code(`ppat`);の長さを得ます。これは厳密なアルゴリズムではなく、精度を\code(`delta`);で指定します。
                 * \code(`get-point-of-len delta len ppat`);${\cdots}与えられた未完パス\code(`ppat`);上で始点から長さ\code(`len`);の地点を取得します。
                 * \code(`get-projection delta p ppat`);${\cdots}与えられた未完パス\code(`ppat`);上で与えられた点\code(`p`);に最も近い点を取得します。
                 * \code(`get-projection-length delta p ppat`);${\cdots}与えられた未完パス\code(`ppat`);上で与えられた点\code(`p`);に最も近い点の位置を表す長さを取得します。
                 * \code(`split delta len ppat`);${\cdots}与えられた未完パス\code(`ppat`);を長さ\code(`len`);の位置で分割します。
             }
             +p {
                 例えば、
             }
             +code(```
 let ppat = XPath.(
     start-path (-4cm, 0pt)
     |> bezier-to (-4cm, 2.8cm) (-2.8cm, 4cm) (0pt, 4cm)
     |> bezier-to (2.8cm, 4cm) (4cm, 2.8cm) (4cm, 0pt)
     |> bezier-to (4cm, -2.8cm) (2.8cm, -4cm) (0pt, -4cm)
     |> bezier-to (-2.8cm, -4cm) (-4cm, -2.8cm) (-4cm, 0pt)
 ) in
 let len = XPath.get-rough-length 0.001cm ppat in
 let n = 8 in
 range-span 0. 1. n |> List.mapi (fun i (a, b) -> (
    let (_, ppat) = ppat |> XPath.split 0.01cm (len *' a) in
    let (ppat, _) = ppat |> XPath.split 0.01cm (len *' (b -. a)) in
    let clr = if i mod 2 == 0 then Color.red else Color.blue in
    ppat |> XPath.terminate-path |> XPath.stroke 5pt clr
 ))
             ```);
             +p {
                 は
                 \test-path(
                     let ppat = XPath.(
                         start-path (-4cm, 0pt)
                         |> bezier-to (-4cm, 2.8cm) (-2.8cm, 4cm) (0pt, 4cm)
                         |> bezier-to (2.8cm, 4cm) (4cm, 2.8cm) (4cm, 0pt)
                         |> bezier-to (4cm, -2.8cm) (2.8cm, -4cm) (0pt, -4cm)
                         |> bezier-to (-2.8cm, -4cm) (-4cm, -2.8cm) (-4cm, 0pt)
                     ) in
                     let len = XPath.get-rough-length 0.001cm ppat in
                     let n = 8 in
                     range-span 0. 1. n |> List.mapi (fun i (a, b) -> (
                        let (_, ppat) = ppat |> XPath.split 0.01cm (len *' a) in
                        let (ppat, _) = ppat |> XPath.split 0.01cm (len *' (b -. a)) in
                        let clr = if i mod 2 == 0 then Color.red else Color.blue in
                        ppat |> XPath.terminate-path |> XPath.stroke 5pt clr
                     ))
                 );
                 と表示されます。また、
             }
             +code(```
let ppat = XPath.(
    start-path (0pt, 0pt)
    |> bezier-to (1cm, -2cm) (1cm, 3cm) (2cm, 2cm)
    |> bezier-to (4cm, 4cm) (5cm, -2cm) (6cm, 0cm)
) in
let p = (3cm, 0cm) in
let len = XPath.get-projection-length 0.1cm p ppat in
let proj = XPath.get-point-of-len 0.1cm len ppat in
let (ppat1, ppat2) = XPath.split 0.1cm len ppat in
XPath.([
    ppat1 |> terminate-path |> stroke 5pt Color.blue;
    ppat2 |> terminate-path |> stroke 5pt Color.red;
    start-path p |> line-to proj |> terminate-path |> stroke 1pt Color.black
])
             ```);
             +p{
                 \test-path(
                     let ppat = XPath.(
                         start-path (0pt, 0pt)
                         |> bezier-to (1cm, -2cm) (1cm, 3cm) (2cm, 2cm)
                         |> bezier-to (4cm, 4cm) (5cm, -2cm) (6cm, 0cm)
                     ) in
                     let p = (3cm, 0cm) in
                     let len = XPath.get-projection-length 0.1cm p ppat in
                     let proj = XPath.get-point-of-len 0.1cm len ppat in
                     let (ppat1, ppat2) = XPath.split 0.1cm len ppat in
                     XPath.([
                         ppat1 |> terminate-path |> stroke 5pt Color.blue;
                         ppat2 |> terminate-path |> stroke 5pt Color.red;
                         start-path p |> line-to proj |> terminate-path |> stroke 1pt Color.black
                     ])
                 );
             }



         >
        +section{パスの変形}<
            +p {
                ここでは、パスの変形に用いるコマンドを説明します。
            }
             +code(```
XPath.offset : length -> XPath.pre -> XPath.pre
XPath.offset-path : length -> XPath.t -> XPath.t
             ```);
             +p {
                 \code(`XPath.offset l ppat`);及び\code(`XPath.offset-path l pat`);はそれぞれ未完パス及びパスを与えられた長さ\code(`l`);分ずらします。長さとして負の値を指定すると、逆方向にずらします。例えば、
             }
             +code(```
let ppat = XPath.(
    start-path (0cm, 0cm)
    |> bezier-to (0cm, 2cm) (3cm, 2cm) (3cm, 0cm)
    |> bezier-to (3cm, -2cm) (6cm, -2cm) (6cm, 0cm)
) in
[
    (ppat, Color.black);
    (ppat |> XPath.offset 1cm, Color.blue);
    (ppat |> XPath.offset -1cm, Color.red);
] |> List.map (fun (pp, clr) -> XPath.(
    pp |> terminate-path |> stroke 5pt clr
))
            ```);
            +p {
                 を表示すると
            }
             +p {
                 \test-path(
                     let ppat = XPath.(
                         start-path (0cm, 0cm)
                            |> bezier-to (0cm, 2cm) (3cm, 2cm) (3cm, 0cm)
                            |> bezier-to (3cm, -2cm) (6cm, -2cm) (6cm, 0cm)
                     ) in
                     [
                         (ppat, Color.black);
                         (ppat |> XPath.offset 1cm, Color.blue);
                         (ppat |> XPath.offset -1cm, Color.red);
                     ] |> List.map (fun (pp, clr) -> XPath.(
                         pp |> terminate-path |> stroke 5pt clr
                     ))
                 );

             }


        >
     >
     +chapter{今後追加する機能}<>
     +chapter{内部実装}<>
    % +p {
    %     \test-path(
    %         XPath.(
    %             let p1 = start-path (0cm, -4cm)
    %                 |> bezier-to (5cm, -4cm) (5cm, 4cm) (0cm, 4cm)
    %                 |> terminate-path in
    %             let p2 = start-path (1cm, -4cm)
    %                 |> line-to (1cm, 4cm)
    %                 |> terminate-path in
    %             unite-path p1 p2
    %         )
    %     );
    %     % \test-path(
    %     %     XPath.(
    %     %         let p1 = start-path (-2cm, 0cm)
    %     %             |> bezier-to (-4cm, 2cm) (4cm, 2cm) (4cm, 0cm)
    %     %             |> terminate-path in
    %     %         let p2 = start-path (-2.4cm, -0.5cm)
    %     %             |> line-to (-2.4cm, 2.5cm)
    %     %             |> terminate-path in
    %     %         let p3 = start-path (-1.5cm, 1cm)
    %     %             |> bezier-to (-1cm, 4cm) (1cm, -1cm) (1.5cm, 2cm)
    %     %             |> terminate-path in
    %     %         unite-path (unite-path p1 p2) p3
    %     %     )
    %     % );
    %     \test-path(
    %         XPath.(
    %             let p1 =
    %                 start-path (0pt, 0pt)
    %                 |> line-to (3cm, 3cm)
    %                 %start-path (3cm, 3cm)
    %                 |> bezier-to (6cm, 6cm) (3cm, 0cm) (9cm, 6cm)
    %                 %|> bezier-to (10cm, 9cm) (3cm, 0cm) (5cm, -2cm)
    %                 %|> close-with-bezier (4cm, -3cm) (1cm, -1cm)
    %                 |> terminate-path
    %             in
    %             let p3 = start-path (3cm, 3cm)
    %                 |> line-to (0cm, 0cm)
    %                 |> line-to (9cm, 6cm)
    %                 |> bezier-to (6cm, 6cm) (3cm, 0cm) (9cm, 6cm)
    %                 |> terminate-path
    %             in
    %             p3
    %             % let p2 = start-path (1cm, 2.5cm)
    %             %     |> line-to (8cm, 2.5cm)
    %             %     |> terminate-path in
    %             % p2
    %             %unite-path p1 p2
    %         )
    %     );
    %     % \test-path(
    %     %     XPath.(
    %     %         start-path (5.3mm, 1mm)
    %     %             |> bezier-to (5.3mm, 1mm) (-2mm, 4.7mm) (1.2mm, 13.2mm)
    %     %             |> bezier-to (4.5mm, 21.6mm) (7.3mm, 3.6mm) (13.5mm, 11.1mm)
    %     %             |> bezier-to (19.7mm, 18.7mm) (3.3mm, 15.6mm) (2.4mm, 10.6mm)
    %     %             |> bezier-to (1.5mm, 5.6mm) (39mm, 23.2mm) (29.1mm, 25.1mm)
    %     %             |> bezier-to (19.12mm, 26.9mm) (11.1mm, 25.8mm) (11.1mm, 25.8mm)
    %     %             |> line-to (28.3mm, 4.1mm)
    %     %             |> line-to (14.1mm, 4.8mm)
    %     %             |> line-to (33.3mm, 32.1mm)
    %     %             |> line-to (1.9mm, 7.8mm)
    %     %             |> bezier-to (1.9mm, 7.8mm) (25.7mm, -7.7mm) (21.2mm, -6.7mm)
    %     %             |> bezier-to (16.8mm, 21.3mm) (23.1mm, 21.7mm) (34.3mm, 21.9mm)
    %     %             |> bezier-to (45.4mm, 22mm) (14.9mm, -2.2mm) (5.3mm, 1mm)
    %     %             |> close-with-line
    %     %     )
    %     % );

    % }
>
