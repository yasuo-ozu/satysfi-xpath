@require: list
@import: util
@import: curve
@import: rail

open XPathUtil

type curve = XPathCurve.t
type rail = XPathRail.t
type loc = XPathRail.loc

% Representation of graph-like structure of rails
module XPathGraph : sig

    type t

    val new : t
    val as-points : t -> point list
    val as-rails : t -> rail list

    val add-rail : length -> rail -> t -> t
    % val remove-inner-edges : t -> t
    val into-closed-rails : t -> rail list

end = struct
    type t = rail list * (point list)

    let new = ([], [])
    let as-points (_, lst) = lst
    let as-rails (lst, _) = lst


    let add-rail delta r1 (rs, pts) =
        let r1 = XPathRail.close r1 in
        let ps1 = XPathRail.get-cross-points-self delta r1 in
        let (ps1, pts) = XPathRail.fix-positions delta ps1 pts in
        let (rs, pts, ps1) = rs |> List.fold-right (fun r2 (rs, pts, ps) -> (
            let (ps1, ps2) = XPathRail.get-cross-points delta r1 r2 in
            let (ps1, pts) = fix-positions delta ps1 pts in
            let (ps2, pts) = fix-positions delta ps2 pts in
            let rs2 = XPathRail.split-at-locations delta ps2 r2 in
            (List.append rs r2, pts, XPathRail.migrate-positions ps1 ps)
        )) ([], pts, ps1) in
        let rs1 = break-curves delta ps1 r1 in
        (List.append rs rs1, pts)


    let get-first-curve lst =
        match lst with
        | [] -> abort-with-message `ERROR in get-last-inv-curve`
        | item :: _ -> item


    let-rec get-last-inv-curve lst =
        match lst with
        | [] -> abort-with-message `ERROR in get-last-inv-curve`
        | item :: [] -> XPathCurve.inverse item
        | _ :: lst -> get-last-inv-curve lst


    let point-in-field p (lst, _) =
        let (clst, llst) = lst |> List.fold-lefti (fun i (clst, llst) cs -> (
            let c1 = get-first-curve cs in
            let c2 = get-last-inv-curve cs in
            match (p =.. XPathCurve.as-head c1, p =.. XPathCurve.as-head c2) with
            | (true, true) -> (c1 :: c2 :: clst, llst)
            | (true, false) -> (c1 :: clst, llst)
            | (false, true) -> (c2 :: clst, llst)
            | _ -> (clst, i :: llst)
        )) ([], []) in
        let alst = clst |> List.map (fun c -> (
            point-to-angle (XPathCurve.get-derivative 0. c)
        )) in
        let alst = match alst with
        | [] -> [0.]
        | at :: [] -> abort-with-message `ERROR in point-in-field`
        | _ -> (
              match (alst |> float-sort) with
              | [] -> abort-with-message `ERROR in point-in-field`
              | at0 :: alst ->
                    let (res, at) = alst |> List.fold-left (fun (acc, at0) at -> (
                        ((at +. at0) /. 2.) :: acc,
                        at
                    )) ([], at0) in
                    ((at +. at0) /. 2.) :: res
        ) in
        let (cin, cout) = alst |> List.fold-left (fun (cin, cout) at -> (
            let pv = angle-to-point 1cm at in
            let pe = p +.. pv in
            let pv = point-perp pv in
            let (n, _) = lst |> List.fold-lefti (fun j (acc, llst) cs -> (
                match llst with
                | [] -> (acc, [])
                | i :: llst ->
                      if i == j then
                          let acc = cs |> List.fold-left (fun acc c -> (
                              XPathCurve.get-lineseg-intersects (p, pe) c 
                                  |> List.fold-left (fun acc (u, v) -> (
                                    if u >. 0. then
                                        let qv = XPathCurve.get-derivative v c in
                                        if point-divide pv qv <' 0pt then
                                            acc + 1
                                        else % TODO: == 0pt case
                                            acc - 1
                                    else
                                        acc
                                  )) acc
                          )) acc in
                          (acc, llst)
                      else (acc, i :: llst)
            )) (0, llst) in
            if n == 0 then
                (cin, cout + 1)
            else
                (cin + 1, cout)
        )) (0, 0) in
        if cin == 0 then Some(false)
        else if cout == 0 then Some(true)
        else None


    let remove-inner-edges (lst, pts) =
        let (pts, delpts) = pts |> List.fold-right (fun p (pts, delpts) -> (
            match point-in-field p (lst, pts) with
            | Some(_) -> (pts, p :: delpts)
            | None -> (p :: pts, delpts)
        )) ([], []) in
        let llst = delpts |> List.fold-left (fun acc p -> ( % get touched lines with point
            lst |> List.fold-lefti (fun i acc cs -> (
                let c1 = get-first-curve cs in
                let c2 = get-last-inv-curve cs in
                if p =.. XPathCurve.as-head c1 || p =.. XPathCurve.as-head c2 then
                    let-rec add-num i lst =
                        match lst with
                        | [] -> [i]
                        | n0 :: ns ->
                              if i < n0 then i :: lst
                              else if i == n0 then lst
                              else n0 :: (add-num i ns)
                    in
                    add-num i acc
                else acc
            )) acc
        )) [] in
        let (lst, _) = lst |> List.fold-lefti (fun i (acc, llst) item -> (
            match llst with
            | [] -> (List.append acc [item], [])
            | j :: rm -> if i == j then (acc, rm) else (List.append acc [item], llst)
        )) ([], llst) in
        (lst, pts)


    let-rec get-edge-points lst = match lst with
        | [] -> abort-with-message `ERROR in get-points`
        | c::[] -> XPathCurve.get-edges c
        | c::cs ->
              let (_, pe) = get-edge-points cs in
              let (pa, _) = XPathCurve.get-edges c in
              (pa, pe)


    let into-closed-curves (lst, _) =
        % Build a curve list which begins with p
        let impl p lst =
            let-rec impl-inner p-end p lst =
                let (pe, cs, lst) = lst |> List.fold-right (fun cs (pacc, csacc, lst) -> (
                    let (pa, pe) = get-edge-points cs in
                    if pa =.. pacc  && (List.length csacc == 0 || pa !=.. p) then
                        (pe, List.append csacc cs, lst)
                    else
                        (pacc, csacc, cs::lst)
                )) (p, [], []) in
                match cs with
                | [] -> ([], lst)
                | _ -> (
                      if p-end =.. pe then
                          (cs, lst)
                      else
                          let (cs2, lst0) = impl-inner p-end pe lst in
                          match cs2 with
                          | [] -> abort-with-message `ERROR in into-closed-curves`
                          | _ -> (List.append cs cs2, lst0)
                )
            in
            let (cs, lst) = impl-inner p p lst in
end
